/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.fadedfog.tombs;

import org.junit.Test;

import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.databind.JsonMappingException;

import ru.fadedfog.tombs.asset.character.Character;
import ru.fadedfog.tombs.asset.character.behavior.move.Movable;
import ru.fadedfog.tombs.asset.character.behavior.move.MoveBehavior;
import ru.fadedfog.tombs.asset.character.user.TreasureHunter;
import ru.fadedfog.tombs.asset.geometry.Point;
import ru.fadedfog.tombs.asset.level.element.surface.Surface;
import ru.fadedfog.tombs.asset.level.element.surface.TypeSurface;
import ru.fadedfog.tombs.asset.level.map.room.Room;
import ru.fadedfog.tombs.game.GameLoop;
import ru.fadedfog.tombs.generate.RoomConfig;

import static org.junit.Assert.*;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class AppTest {
    private final String NAME_LEVEL_CONFIG_FILE = "src/test/resources/room.json";
	
    @Test
    public void testGenerateStage() throws JsonGenerationException, JsonMappingException, IOException {
    	Room room = new Room();
    	int width = 100;
    	int height = 60;
    	String name = "RoomTest";
    	TreasureHunter<MoveBehavior> treasureHunter = new TreasureHunter<MoveBehavior>();
    	treasureHunter.setHearts(2);
    	treasureHunter.setName("Hunter");
    	treasureHunter.setLevelScore(999);
    	treasureHunter.setTotalScore(9999);
    	treasureHunter.setMoveBehavior(new Movable());
    	Character<MoveBehavior> npc = new Character<MoveBehavior>();
    	npc.setHearts(1);
    	npc.setName("NPC_1");
    	npc.setMoveBehavior(new Movable());
    	Map<Point, Character<MoveBehavior>> map1 = new HashMap<>();
    	map1.put(new Point(1,1), treasureHunter);
    	map1.put(new Point(2,2), npc);
    	Surface<TypeSurface> block = new Surface<TypeSurface>(TypeSurface.BLOCK);
    	Map<Point, Surface<TypeSurface>> map2 = new HashMap<>();
    	map2.put(new Point(2,2), block);
    	
    	room.setCharacters(map1);
    	room.setSurfaces(map2);
    	room.setHeight(height);
    	room.setWidth(width);
    	room.setName(name);
    	
    	RoomConfig serializerRoom = new RoomConfig();
    	serializerRoom.setCustomPath(NAME_LEVEL_CONFIG_FILE);
    	serializerRoom.serialize(room);
    	
    	Room newRoom = serializerRoom.deserialize();
    	
    	assertEquals(room, newRoom);
    }
    
    @Test
    public void testGameLoop() {
    	GameLoop gameLoop = new GameLoop();
    	gameLoop.getRoomConfig().setCustomPath(NAME_LEVEL_CONFIG_FILE);
    	gameLoop.start();
    	assertTrue(gameLoop.isRunning());
    	
    	
    	gameLoop.stop();
    	assertFalse(gameLoop.isRunning());
    	
   }
    
    
    @Test
    public void testMovingNPCs() throws JsonGenerationException, JsonMappingException, IOException {    	
    	String name1 = "Monseter_1";
    	String name2 = "Monseter_2";
    	Point point1 = new Point(0, 5);
    	Character<MoveBehavior> monster1 = new Character<>();
    	monster1.setMoveBehavior(new Movable());
    	monster1.setName(name1);
    	monster1.setHearts(2);
    	Point point2 = new Point(3, -2);
    	Character<MoveBehavior> monster2 = new Character<>();
    	monster2.setMoveBehavior(new Movable());
    	monster2.setName(name2);
    	monster2.setHearts(1);
    	
    	Map<Point, Character<MoveBehavior>> characters = new HashMap<>();
    	characters.put(point1, monster1);
    	characters.put(point2, monster2);
    	
    	Room room = new Room();
    	room.setHeight(100);
    	room.setWidth(60);
    	room.setName("testRoom2");
    	room.setCharacters(characters);
    	room.setSurfaces(new HashMap<>());
    	
    	RoomConfig roomConfig = new RoomConfig();
    	roomConfig.setCustomPath(NAME_LEVEL_CONFIG_FILE);
    	roomConfig.serialize(room);
    	
    	GameLoop gameLoop = new GameLoop();
    	gameLoop.getRoomConfig().setCustomPath(NAME_LEVEL_CONFIG_FILE);
    	gameLoop.start();
    	
    	Room room2 = gameLoop.getRoom();
    	int xMonster = -1;
    	int yMonster = 3;
    	Map<Point, Character<MoveBehavior>> characters2 = room2.getCharacters();
    	Map<Point, Character<MoveBehavior>> updateChatecters = new HashMap<>();
    	Point[] points = new Point[characters2.size()];
    	int i = 0;
    	
    	for (Map.Entry<Point, Character<MoveBehavior>> character: characters2.entrySet()) {
    		Character<MoveBehavior> value = character.getValue();
    		
    		Point point = character.getKey();
    		point.setX(point.getX() + xMonster);
    		point.setY(point.getY() + yMonster);
    		
    		points[i] = point;
    		i++;
    		
    		updateChatecters.put(point, value);

    	}
    	
    	for (Map.Entry<Point, Character<MoveBehavior>> charaEntry: room.getCharacters().entrySet()) {
    		System.out.println(charaEntry.getKey() + " " + charaEntry.getValue());
    	}
    	System.out.println();
    	
    	for (Map.Entry<Point, Character<MoveBehavior>> charaEntry: room2.getCharacters().entrySet()) {
    		System.out.println(charaEntry.getKey() + " " + charaEntry.getValue());
    	}
    	
    	assertFalse(room.getCharacters().equals(room2.getCharacters()));
    	
    }
    
}








