/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.fadedfog.tombs;

import ru.fadedfog.tombs.asset.character.Character;
import ru.fadedfog.tombs.asset.character.npc.FactoryEnemy;
import ru.fadedfog.tombs.asset.character.npc.FactoryPeacefulCreature;
import ru.fadedfog.tombs.asset.character.npc.enemy.TypeEnemy;
import ru.fadedfog.tombs.asset.character.npc.peaseful.TypePeacefulCreature;
import ru.fadedfog.tombs.asset.character.user.TreasureHunter;
import ru.fadedfog.tombs.asset.level.element.FactoryClimbItem;
import ru.fadedfog.tombs.asset.level.element.FactoryContainer;
import ru.fadedfog.tombs.asset.level.element.FactorySurface;
import ru.fadedfog.tombs.asset.level.element.FactoryTrap;
import ru.fadedfog.tombs.asset.level.element.Surface;
import ru.fadedfog.tombs.asset.level.element.climb.ClimbItem;
import ru.fadedfog.tombs.asset.level.element.climb.TypeClimbItem;
import ru.fadedfog.tombs.asset.level.element.container.Container;
import ru.fadedfog.tombs.asset.level.element.container.TypeContainer;
import ru.fadedfog.tombs.asset.level.element.surface.TypeSurface;
import ru.fadedfog.tombs.asset.level.element.trap.Trap;
import ru.fadedfog.tombs.asset.level.element.trap.TypeTrap;
import ru.fadedfog.tombs.asset.projectile.FactoryProjectile;
import ru.fadedfog.tombs.asset.projectile.Projectile;
import ru.fadedfog.tombs.asset.projectile.TypeProjectile;
import ru.fadedfog.tombs.asset.reward.FactoryReward;
import ru.fadedfog.tombs.asset.reward.Reward;
import ru.fadedfog.tombs.asset.reward.TypeReward;

public class App {

    public static void main(String[] args) throws Exception {   	
    	goCharacter();
    	goLevelElement();
    	goProjectile();
    	goReward();
    	goTrap();
    }
    
    // Test Work
    // To Remove
    private static void goCharacter() throws Exception {
    	System.out.println("@_ENEMY");
    	goFactoryEnemy();
    	System.out.println("@_PEACEFUL");
    	goFactoryPeacefulCreature();
    	System.out.println("@_HERO");
    	goHero();
    }
    
    //To Remove
    private static void goFactoryEnemy() throws Exception {
    	for (TypeEnemy typeEnemy: TypeEnemy.values()) {
    		Character enemy = FactoryEnemy.makeEnemy(typeEnemy);
    		System.out.println("	" + typeEnemy + " " + enemy.getClass().getSimpleName());
    		enemy.atack();
    		enemy.climb();
    		enemy.crouch();
    		enemy.dodjeToLeft();
    		enemy.dodjeToRight();
    		enemy.dropReward();
    		enemy.jump();
    		enemy.fly();
    		enemy.kill();
    		enemy.protection();
    		enemy.moveToLeft();
    		enemy.moveToRight();
    		enemy.teleport();
    		enemy.climb();
    	}
    }
    
    //To Remove
    private static void goFactoryPeacefulCreature() throws Exception {
     	for (TypePeacefulCreature typePeaceful: TypePeacefulCreature.values()) {
    		Character peaceful = FactoryPeacefulCreature.makePeacefulCreature(typePeaceful);
    		System.out.println("	" + typePeaceful + " " + peaceful.getClass().getSimpleName());
    		peaceful.atack();
    		peaceful.climb();
    		peaceful.crouch();
    		peaceful.dodjeToLeft();
    		peaceful.dodjeToRight();
    		peaceful.dropReward();
    		peaceful.jump();
    		peaceful.fly();
    		peaceful.kill();
    		peaceful.protection();
    		peaceful.moveToLeft();
    		peaceful.moveToRight();
    		peaceful.teleport();
    		peaceful.climb();
    	}
    }
    
    //To Remove
    private static void goHero() {
    	Character hero = TreasureHunter.getInstance();
    	System.out.println("	" + hero.getClass().getSimpleName());
    	hero.atack();
    	hero.climb();
    	hero.crouch();
    	hero.dodjeToLeft();
    	hero.dodjeToRight();
		hero.dropReward();
		hero.jump();
		hero.fly();
		hero.kill();
		hero.protection();
		hero.moveToLeft();
		hero.moveToRight();
		hero.teleport();
		hero.climb();
    }
    
    //To Remover
    private static void goLevelElement() throws Exception {
    	System.out.println("@_LEVEL_ELEMENT");
    	System.out.println("@_CLIMB_ITEM");
    	goFactoryClimpItem();
    	System.out.println("@_CONTAINER");   
    	goFactoryContainer();
    	System.out.println("@_SURFACE");   
    	goFactorySurface();
    }
    
    //To Remove
    private static void goFactoryClimpItem() throws Exception {
    	for (TypeClimbItem typeClimbItem: TypeClimbItem.values()) {
    		ClimbItem climbItem = FactoryClimbItem.makeClimbItem(typeClimbItem);
    		System.out.println("	" + typeClimbItem + " " + climbItem.getClass().getSimpleName());
    	}
    }
    
    //To Remove
    private static void goFactoryContainer() throws Exception {
    	for (TypeContainer typeContainer: TypeContainer.values()) {
    		Container container = FactoryContainer.makeContainer(typeContainer);
    		System.out.println("	" + typeContainer + " " + container.getClass().getSimpleName());
    	}
    }
    
    //To Remove
    private static void goFactorySurface() throws Exception {
    	for (TypeSurface typeSurface: TypeSurface.values()) {
    		Surface surface = FactorySurface.makeSurface(typeSurface);
    		System.out.println("	" + typeSurface + " " + surface.getClass().getSimpleName());
    	}
    }
    
    //To Remove
    private static void goProjectile() throws Exception {
    	System.out.println("@_PROJECTILE");
    	goFactoryProjectile();
    }
    
    //To Remove
    private static void goFactoryProjectile() throws Exception {
    	for (TypeProjectile typeProjectile: TypeProjectile.values()) {
    		Projectile projectile = FactoryProjectile.makeProjectile(typeProjectile);
    		System.out.println("	" + typeProjectile + " " + projectile.getClass().getSimpleName());
    	}
    }
    
    //To Remove
    private static void goReward() throws Exception {
    	System.out.println("@_REWARD");
    	goFactoryReward();
    }
    
    //To Remove
    private static void goFactoryReward() throws Exception {
    	for (TypeReward typeReward: TypeReward.values()) {
    		Reward reward = FactoryReward.makeReward(typeReward);
    		System.out.println("	" + typeReward + " " + reward.getClass().getSimpleName());
    	}
    }
    
    //To Remove
    private static void goTrap() throws Exception {
    	System.out.println("@_TRAP");
    	goFactoryTrap();
    }
    
    //To Remove
    public static void goFactoryTrap() throws Exception {
    	for (TypeTrap typeTrap: TypeTrap.values()) {
    		Trap reward = FactoryTrap.makeTrap(typeTrap);
    		System.out.println("	" + typeTrap + " " + reward.getClass().getSimpleName());
    	}
    }
}
